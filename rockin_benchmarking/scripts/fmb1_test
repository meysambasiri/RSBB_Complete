#!/usr/bin/env python
import os
import random
import sys
import threading
import time

# ROS imports
import rospy
import tf


class colors:
	INPUT = '\033[96m'
	INFO = '\033[92m'
	WARN = '\033[93m'
	FAIL = '\033[91m'
	END = '\033[0m'

def main():
	global origin
	
	rospy.init_node("fbm1h")

	listener = tf.TransformListener()
	br = tf.TransformBroadcaster()

	items = rospy.get_param('/fbm1h/items')
	
	for i in range(50):
		item = random.choice(items)
		
		try:
			a = raw_input(colors.INPUT + "Place item %d on the table and press ENTER" % item['id'] + colors.END)
			
			br.sendTransform(item['trans'],	item['rot'], rospy.Time.now(), "item", "ref_board")
			time.sleep(1)
			(trans, rot) = listener.lookupTransform("/origin", "/item", rospy.Time(0))
			euler = tf.transformations.euler_from_quaternion(rot)
		
			print colors.INFO + "Item acquired" + colors.END
			print "X: %2.5f\tY: %2.5f\tZ: %2.5f\tW: %3.2f" % (trans[0], trans[1], trans[2], euler[2] * 57.2957795)

		except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
			print colors.WARN + "Reference board not visible" + colors.END
			
if __name__ == '__main__':
	main()

