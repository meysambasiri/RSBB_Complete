#!/usr/bin/env python
import sys
import os
import getopt
import threading
from time import gmtime, strftime

import roslib
import rospy
import math
import tf
import geometry_msgs.msg

origin = {'trans': [0, 0, 0], 'rot': [0, 0, 0, 1]}

class colors:
	INPUT = '\033[96m'
	INFO = '\033[92m'
	WARN = '\033[93m'
	FAIL = '\033[91m'
	END = '\033[0m'
	
def main():
	
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hi:")
	except getopt.GetoptError:
		print "Usage: " + sys.argv[0] + " -i <id>"
		sys.exit()
	for opt, arg in opts:
		if opt == '-h':
			print "Usage: " + sys.argv[0] + " -i <id>"
			sys.exit()
		elif opt == '-i':
			object_id = arg

	rospy.init_node("acquire_objects")
	
	listener = tf.TransformListener()
	br = tf.TransformBroadcaster()
	
	items = rospy.get_param(rospy.get_namespace() + 'items')

	for item in items:
		try:
			a = raw_input(colors.INPUT + "Place item %d (%s) in the reference board and press ENTER" % (item['id'], item['instance']) + colors.END)

			(ref_trans, ref_rot) = listener.lookupTransform("/ref_board", "/origin", rospy.Time(0))
			ref_euler = tf.transformations.euler_from_quaternion(ref_rot)
			
			print colors.INFO + "Item acquired" + colors.END
			print "X: %2.5f\tY: %2.5f\tZ: %2.5f\tW: %3.2f" % (ref_trans[0], ref_trans[1], ref_trans[2], ref_euler[2] * 57.2957795)

			rospy.sleep(0.1)
		
		except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
			print colors.WARN + "Reference board not visible" + colors.END
			continue
		
		item['trans'] = ref_trans
		item['rot'] = ref_rot

	rospy.set_param('items', items)			
	os.system("rosparam dump /home/rockin/" + rospy.get_namespace().strip("/") + "-" + strftime("%Y-%m-%d_%H:%M:%S", gmtime()) + ".yaml " + rospy.get_namespace())

if __name__ == '__main__':
	main()

